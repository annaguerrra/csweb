// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockTestCs.Entities;

#nullable disable

namespace csweb.Migrations
{
    [DbContext(typeof(MockTestCsDbContext))]
    [Migration("20250908000834_initalModelL")]
    partial class initalModelL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HistoryReadingList", b =>
                {
                    b.Property<Guid>("HistoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReadingListsID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HistoriesId", "ReadingListsID");

                    b.HasIndex("ReadingListsID");

                    b.ToTable("HistoryReadingList");
                });

            modelBuilder.Entity("MockTestCs.Entities.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("MockTestCs.Entities.ReadingList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ReadingLists");
                });

            modelBuilder.Entity("MockTestCs.Entities.ReadingListHistory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HistoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReadingListID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("HistoryID");

                    b.HasIndex("ReadingListID");

                    b.HasIndex("UserID");

                    b.ToTable("ReadingListHistorys");
                });

            modelBuilder.Entity("MockTestCs.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HistoryReadingList", b =>
                {
                    b.HasOne("MockTestCs.Entities.History", null)
                        .WithMany()
                        .HasForeignKey("HistoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MockTestCs.Entities.ReadingList", null)
                        .WithMany()
                        .HasForeignKey("ReadingListsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MockTestCs.Entities.History", b =>
                {
                    b.HasOne("MockTestCs.Entities.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MockTestCs.Entities.ReadingList", b =>
                {
                    b.HasOne("MockTestCs.Entities.User", "User")
                        .WithMany("ReadingLists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MockTestCs.Entities.ReadingListHistory", b =>
                {
                    b.HasOne("MockTestCs.Entities.History", "History")
                        .WithMany("ReadingListHistories")
                        .HasForeignKey("HistoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MockTestCs.Entities.ReadingList", "ReadingList")
                        .WithMany("ReadingListHistories")
                        .HasForeignKey("ReadingListID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MockTestCs.Entities.User", "User")
                        .WithMany("ReadingListHistories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("ReadingList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MockTestCs.Entities.History", b =>
                {
                    b.Navigation("ReadingListHistories");
                });

            modelBuilder.Entity("MockTestCs.Entities.ReadingList", b =>
                {
                    b.Navigation("ReadingListHistories");
                });

            modelBuilder.Entity("MockTestCs.Entities.User", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("ReadingListHistories");

                    b.Navigation("ReadingLists");
                });
#pragma warning restore 612, 618
        }
    }
}
